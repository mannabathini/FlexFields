 
---------------------

class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < (n + 1) / 2; i ++) {
            for (int j = 0; j < n / 2; j++) {
                int temp = matrix[n - 1 - j][i];
                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - j - 1];
                matrix[n - 1 - i][n - j - 1] = matrix[j][n - 1 -i];
                matrix[j][n - 1 - i] = matrix[i][j];
                matrix[i][j] = temp;
            }
        }
    }
}



public void rotate(int[][] matrix) {
    int n = matrix.length;
    for (int i = 0; i < n; i++) { // Transpose
      for (int j = i; j < n; j++) {
        int temp = matrix[i][j];
        matrix[i][j] = matrix[j][i];
        matrix[j][i] = temp;
      }
    }

    for (int i = 0; i < n; i++) { // Reverse each row
      for (int j = 0; j < n / 2; j++) {
        int temp = matrix[i][j];
        matrix[i][j] = matrix[i][n - 1 - j];
        matrix[i][n - 1 - j] = temp;
      }
    }
  }




 




-----------------------
***Merged 2 linked lists 

import java.util.*;
import java.io.*;
class TutorialCup
{
    /* blue print of node */
    static class Node
    {
        int data;
        Node next;
        
        Node(int num)
        {
            data = num;
            next = null;
        }
    };
    
    /* append a node at the end of the Linked List */
    static Node insert(Node head,int data)
    {
        if(head == null)
            head = new Node(data);
        else
        {
            Node temp = head;
            while(temp.next != null)
            temp = temp.next;
            
            temp.next = new Node(data);
        }
        
        return head;
    }
    
    /* print the Linked List */
    static void print(Node head)
    {
        if(head != null)
        {
            System.out.print(head.data + " ");
            print(head.next);
        }
    }
    
    /* function that merges 2 Linked Lists keeping the Sorted 
    Order & returns the head of of the merged Linked List */
    static Node utility(Node x,Node y) 
    { 
        /* head is used to return head of the merged linked list */
        Node head = new Node(-1);
        /* tail is used to append a node at end 
        of the merged linked list at each step */
        Node tail = head;
        
        /* process until one of the linked list becomes empty */
        while(x != null && y != null)
        {
            if(x.data < y.data)
            {
                tail.next = x;
                x = x.next;
            }
            else
            {
                tail.next = y;
                y = y.next;
            }
            
            tail = tail.next;
        }
        
        /* if any of the linked list gets exhausted 
        append the other one to the merged list */
        if(x == null)
        tail.next = y;
        
        if(y == null)
        tail.next = x;
        
        return head.next;
    } 
    /* function to merge two sorted linked 
    lists using a utility function */
    static Node sortedMerge(Node x,Node y)
    {
        if (x == null) 
            return y; 
        if (y == null) 
            return x; 
      
        /* start with the linked list whose head data is the lesser */
        if (x.data < y.data) 
            return utility(x,y); 
        else
            return utility(y,x); 
    }
    
    /* function to implement above */
    public static void main (String[] args)
    {
        Node x = null, y = null;
        
        /* construct the first Linked List */
        x = insert(x,3);
        x = insert(x,4);
        x = insert(x,7);
        x = insert(x,9);
        System.out.print("First Linked List : ");
        print(x);
        
        System.out.println();
        
        /* construct the second Linked List */
        y = insert(y,1);
        y = insert(y,2);
        y = insert(y,5);
        y = insert(y,6);
        y = insert(y,8);
        System.out.print("Second Linked List : ");
        print(y);
        
        System.out.println();
        
        /* merge the 2 Linked Lists and print */
        System.out.print("Merged Linked List in Sorted Order : ");
        Node result = sortedMerge(x,y);
        print(result);
    }
}

--------------------------
 we are given a linked list with its nodes having integer values. We need to delete some nodes from the list which have value equal to val. The problem does not require to be solved in-place but we will discuss one such approach.
List = 1 -> 2 -> 2 -> 3 -> 4 , val = 2   
1 3 4

List = 2 -> 2 -> 2 -> 2 , val = 2
Empty List

class listNode
{
    int value;
    listNode next;
    listNode(int x)
    {
        value = x;
        next = null;
    }
};
class remove_linked_list_elements {

    public static listNode removeElements(listNode head, int val) {
        if(head == null) {
            return head;
        }
        if(head.value == val) {
            return removeElements(head.next , val);
        }
        head.next = removeElements(head.next , val);
        return head;
    }
    
    
    public static void print(listNode head) {
        if(head == null) {
            System.out.println("Empty List");
            return;
        }
        while(head != null)
        {
            System.out.print(head.value + " ");
            head = head.next;
        }
        System.out.println();
        return;
    }    
    
    public static void main(String args[]) {
        listNode head = new listNode(1);
        head.next = new listNode(2);
        head.next.next = new listNode(2);
        head.next.next.next = new listNode(3);
        head.next.next.next.next = new listNode(4);
        int val = 2;
        print(removeElements(head , val));
    }
}





alternative 

class listNode
{
    int value;
    listNode next;
    listNode(int x)
    {
        value = x;
        next = null;
    }
};
class remove_linked_list_elements {
    public static void print(listNode head) {
        if(head == null) {
            System.out.println("Empty List");
        return;
        }
        while(head != null)
        {
            System.out.print(head.value + " ");
            head = head.next;
        }
        System.out.println();
        return;
    }
    public static listNode removeElements(listNode head, int val) {
        listNode dummy = new listNode(-1) , prev = dummy , toDelete;
        dummy.next = head;
        while(head != null) {
            if(head.value == val) {
                prev.next = head.next;
            }
            else {
                prev = head;
            }
            head = head.next;
        }
        return dummy.next;
    }
    public static void main(String args[]) {
        listNode head = new listNode(1);
        head.next = new listNode(2);
        head.next.next = new listNode(2);
        head.next.next.next = new listNode(3);
        head.next.next.next.next = new listNode(4);
        int val = 2;
        print(removeElements(head , val));
    }
}







---------------------------


 


You are given a matrix of integers matrix of size n × m and a list of queries queries. 
The given matrix is colored in black and white in a checkerboard style -
the top left corner is colored white and any two side-neighboring cells have opposite colors.
Each query is represented as a pair of indices (i, j). For each query, perform the following operations:

Select the ith-smallest value among the black cells. In case of a tie, select the one with the lower row number.
If there is still a tie, select the one with the lower column number;
Select the jth-smallest white cell using the same process;
Find the average value of these two cells;
If the average value is a whole integer, replace both of the selected cells with the found average value;
Otherwise, replace the cell of the greater value with the average rounded up to the nearest integer, 
and replace the cell of the smaller value with the average rounded down to the nearest integer.
Your task is to return the resulting matrix after processing all the queries.

Example

For

matrix = [[2, 0, 4],
          [2, 8, 5],
          [6, 0, 9],
          [2, 7, 10],
          [4, 3, 4]]
and queries = [[0, 0], [1, 3]], the output should be

meanAndChessboard(matrix, queries) = [[1, 2, 4],
                                      [2, 8, 5],
                                      [6, 0, 9],
                                      [2, 7, 10],
                                      [4, 3, 3]]
                                      
                                      
                                      
The average of the 0th black cell and the 0th white cell is (0 + 2) / 2 = 1, so both cells are replaced with 1.
The average of the 1st black cell and the 3rd white cell is (1 + 4) / 2 = 2.5, so the 1 is replaced with floor(2.5) = 2 and the 4 is replaced with ceil(2.5) = 3.
For
	      matrix = [[1, 9, 10, 8],
	                [3, 4, 4, 4]]
	      and queries = [[2, 3], [3, 2]], the output should be
			      
meanAndChessboard(matrix, queries) = [[1, 9, 9, 7],
                                      [3, 4, 4, 6]]
                                      
                                      
Input/Output

[execution time limit] 3 seconds (java)

[input] array.array.integer matrix

A matrix of integers.

Guaranteed constraints:
2 = matrix.length = 30,
2 = matrix[i].length = 30,
0 = matrix[i][j] = 1000.

[input] array.array.integer queries

A matrix of integers representing queries. Each row has length 2 and represents a single query. It's guaranteed that all the indices in all the queries are valid.

Guaranteed constraints:
1 = queries.length = 500,
queries[i].length = 2.

[output] array.array.integer

The resulting matrix after processing all the queries in the order they appear in queries.



--------------------

The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:

string convert(string s, int numRows);
 

Example 1:

Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
Example 2:

Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I
Example 3:

Input: s = "A", numRows = 1
Output: "A"

class Solution {
    public String convert(String s, int numRows) {
              if (numRows == 1) return s;

        StringBuilder ret = new StringBuilder();
        int n = s.length();
        int cycleLen = 2 * numRows - 2;

        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j + i < n; j += cycleLen) {
                ret.append(s.charAt(j + i));
                if (i != 0 && i != numRows - 1 && j + cycleLen - i < n){
                    ret.append(s.charAt(j + cycleLen - i));
                    System.out.println(" CASE : "+ i+ " " + j + "   " + s.charAt(j + cycleLen - i));
                }
            }
        }
        return ret.toString();
      
    }
}


---------------
public int romanToInt(String s) {
        Map<Character,Integer> numbersMap = new HashMap<>();
        numbersMap.put('I',1);
        numbersMap.put('V',5);
        numbersMap.put('X',10);
        numbersMap.put('L',50);
        numbersMap.put('C',100);   
        numbersMap.put('D',500);   
        numbersMap.put('M',1000);  
        
        int result=0;
        
    for(int i=0;i<s.length();i++) {
      char ch = s.charAt(i);      // Current Roman Character
      
      //Case 1
      if(i>0 && numbersMap.get(ch) > numbersMap.get(s.charAt(i-1))){
        result += numbersMap.get(ch) - 2*numbersMap.get(s.charAt(i-1));
      }
      
      // Case 2: just add the corresponding number to result.
      else
        result += numbersMap.get(ch);
    }
        
    return result; 
    }

    public String intToRoman(int num) {
        String M[] = {"", "M", "MM", "MMM"};
        String C[] = {"", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"};
        String X[] = {"", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"};
        String I[] = {"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"};

        return M[num/1000] + C[(num%1000)/100] + X[(num%100)/10] + I[num%10];
    }


---------------

public class Solution {
    private final String[] LESS_THAN_20 = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
    private final String[] TENS = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
    private final String[] THOUSANDS = {"", "Thousand", "Million", "Billion"};

    public String numberToWords(int num) {
        //return zero
        if(num==0) return "Zero";
        //get every words
        int i = 0;
        String words = "";
    
        while (num > 0) {
            if (num % 1000 != 0)
        	    words = helper(num % 1000) +THOUSANDS[i] + " " + words;
        	num /= 1000;
        	i++;
        }
        
        return words.trim();
    }
    //use a helper to divide down number 
    private String helper(int num) {
    	if (num == 0)
    	    return "";
    	else if (num < 20)
    		return LESS_THAN_20[num] + " ";
    	else if (num < 100)
    		return TENS[num / 10] + " " + helper(num % 10);
    	else
    		return LESS_THAN_20[num / 100] + " Hundred " + helper(num % 100);
    }
}


--------------------
    public static void getPartition(int[] arr, int lowValue, int highValue) {
        int n = arr.length; int startingValue = 0, endingValue = n-1;
        for(int i = 0; i <= endingValue;) {
            if(arr[i] < lowValue)  {
                int temp = arr[startingValue];
                arr[startingValue] = arr[i];
                arr[i] = temp;
                startingValue++;
                i++;
            } else if(arr[i] > highValue) {
                int temp = arr[endingValue];
                arr[endingValue] = arr[i];
                arr[i] = temp;
                endingValue --;
            } else {
                i++;
            }
            System.out.println(" After loop " + i + " " + java.util.Arrays.toString(arr));
        }
    }
    public static void main (String[] args) {
        int arr[] = {2,5,87,56,12,4,9,23,76,1,45};
        getPartition(arr, 15, 30 );
        System.out.print(java.util.Arrays.toString(arr));
    }
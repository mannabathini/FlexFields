STRING REVERSE :::
boolean checkPalindrome(String s) {
 return s.equals(new StringBuilder(s).reverse().toString());
}

-----------
FIRST NON-REPEATING CHAR :::::
static char firstNotRepeatingCharacter(String s) {
  for(int i=0;i<s.length();i++){
    if(s.indexOf(s.charAt(i))== s.lastIndexOf(s.charAt(i)))
       	return s.charAt(i);
  }
  return '_';
}
-------
FIRST DUPLICATE ::::
int firstDuplicate(int[] a) {
  for (int i = 0 ; i < a.length; i++) {
    int  posi = Math.abs(a[i]) - 1;
    if (a[posi] < 0) 
        return posi + 1;
    a[posi] = a[posi] * -1;
  }
  return -1;
}
  
-----
“Count all subsequences having product less than K”  
find the number of subsequences that have a product less than a given input K.
a[] = {1, 2, 3, 4, 5}  & k = 8  -->  Number of subsequences less than 8: 11
{1},{2},{3},{4},{5}, {1,2}, {1,3}, {1,4}, {1,5}, {2,3} ,  {1,2,3}
class Main{
  public static void main(String[] args) {
      int a[] = {1, 2, 3, 4, 5};
      int n = a.length , k = 8;
      int dp[][] = new int[k][n+1];
      for(int i=0;i<k;i++)
        for(int j=0;j<n+1;j++)
          dp[i][j] = 0;
      for (int i=1;i<k;i++){
          for (int j=1;j<=n;j++){
              dp[i][j] = dp[i][j-1];
              if (a[j-1] <= i && a[j-1] > 0)
                  dp[i][j] += dp[i/a[j-1]][j-1] + 1;
          }
      }
    System.out.println(dp[k-1][n]);
  }
}

---
COPY ARRAY:::
static int[] copyArray(int n, int[] a) {
  int[] b = new int[n];
  for (int i = 0; i < n; i++) {
    int pre = (i - 1 < 0) ? 0 : a[i - 1];
    int next = (i + 1 < n) ? a[i + 1] : 0;
     b[i] = pre + a[i] + next;
  }
  return b;
}
------
CONTIGUOUS SUBARRAY 
static long subarraysCountBySum(int[] arr, int k, long s) {
  int count = 0;
  for (int start = 0; start < arr.length; start++) {
     int sum=0, sublen =0;
     for (int end = start; end < arr.length && sublen < k; end++) {
        sum+=arr[end];
        sublen++;
        if (sum == s)
           count++;
     }
  }
  return count;
}
--------
ALL SUBSEQUENCES 
public static void main(String[] args) {
  int a[] = {1, 2, 3, 4, 5};
  int n = a.length , k = 8;
  int dp[][] = new int[k][n+1];
  for(int i=0;i<k;i++)
    for(int j=0;j<n+1;j++)
       dp[i][j] = 0;
  for (int i=1;i<k;i++){
    for (int j=1;j<=n;j++){
       dp[i][j] = dp[i][j-1];
       if (a[j-1] <= i && a[j-1] > 0)
           dp[i][j] += dp[i/a[j-1]][j-1] + 1;
    }
  }
  System.out.println(dp[k-1][n]);
}

-------
SUM of reverse numbers of arr
arr = [7, 234, 58100] --> output = 18939
CODE:::
static int totalSum(int[] arr) {
   int sum = 0; // Stores the final sum
   for (int num: arr) {
      int count = 0, rev = 0; boolean f = false;
      while (num > 0) {
         while (num > 0 && !f && num % 10 == 0) {
           count++;
           num = num / 10;
         }
         f = true; // Update flag with true
         if (num > 0) {
           rev = rev * 10 + num % 10;
           num = num / 10;
        }
      }
     if (count > 0)
        rev = rev * (int) Math.pow(10, count);
     sum = sum + rev; // Update sum
  }
  return sum;
}
-----------
CODE::::
static int[] plusOne(int[] digits) {
  int n = digits.length;
  for(int i=n-1; i>=0; i--) {
    if(digits[i] < 9) {
      digits[i]++; return digits;
    }
    digits[i] = 0;
  }
  int[] newNumber = new int [n+1];
  newNumber[0] = 1;
  return newNumber;
}
------------
SUM OF MIN & MAX elements of all subarrays of size k
static int sumOfMinMax(int[] arr, int k) {
   int n = arr.length, sum = 0;
   for (int i = 0; i <= n - k; i++) {
     int min = Integer.MAX_VALUE;
     int max = Integer.MIN_VALUE;
     for (int j = i; j < i + k; j++) {
         min = Math.min(min, arr[j]);
         max = Math.max(max, arr[j]);
     }
     sum += (min + max); 
  }
  return sum;
}
----
COIN CHANGE 
static long coin_count(int arr[], int n){ 
   int size = arr.length;
   long[] count = new long[n+1]; 
   java.util.Arrays.fill(count, 0);
   count[0] = 1; 
   for (int i=0; i<size; i++) 
      for (int j = arr[i]; j<=n; j++) 
         count[j] += count[j-arr[i]]; 
  
   return count[n]; 
} 
--------
Longest Repeated Subsequence


--------
public static void getTriplet(int arr[]) {
  int n = arr.length;  int i;
  int maximum = n - 1; int minimum = 0; 
  int[] small = new int[n]; small[0] = -1;
  int[] great = new int[n]; great[n - 1] = -1;

  for (i = 1; i < n; i++) {
    if (arr[i] <= arr[minimum]) {
        minimum = i; small[i] = -1;
    } else
       small[i] = minimum;
  }
  for (i = n - 2; i >= 0; i--) {
    if (arr[i] >= arr[maximum]) {
       maximum = i; great[i] = -1;
   } else
      great[i] = maximum;
 }
 for (i = 0; i < n; i++) {
   if (small[i] != -1 && great[i] != -1) {
     System.out.println(arr[small[i]]+" "+arr[i]+" "+ arr[great[i]]);
     return;
   }
 }
 System.out.println("3 numbers not found");
 return;
}

-----
public int countQuadruplets(int[] nums) {
  Map<Integer, List<Integer>> map = new HashMap<>();
  int res = 0;
  for (int i = 0; i < nums.length - 2; i ++) {
    for (int j = i + 1; j < nums.length - 1; j ++) {
      for (int k = j + 1; k < nums.length; k ++) {
 	int s = nums[i] + nums[j] + nums[k];
	map.putIfAbsent(s, new ArrayList<>());
	map.get(s).add(k);
      }
    }
  }
  for (int i = 0; i < nums.length; i ++) {
    if (map.containsKey(nums[i])) {
      for (int v: map.get(nums[i])) {
  	if (i > v) { res ++; }
      }
    }
  }
  return res;
}

----------
int[] sortedSquaredArray(int[] array){
  int[] result = new int[array.length];
  int left =0;
  int right = array.length-1;
  for ( int i = array.length-1 ; i>=0 ; i--){
    if (Math.abs(array[left]) > array[right]){
      result[i] = array[left] * array[left]; 
      left++;
    } else {
      result[i] = array[right] * array[right]; 
      right--;
    }
  }
  return results
}